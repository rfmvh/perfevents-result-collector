#!/usr/bin/env python

import argparse
import logging

from perfresultcollector.formatter import format_output
from perfresultcollector.models import Query
from perfresultcollector import set_logger_level

parser = argparse.ArgumentParser()
parser.set_defaults(listmode=0)
parser.add_argument("--event", action="append", help="name event")
parser.add_argument("--event-group", action="append")
parser.add_argument("--tool-name", action="append")
parser.add_argument("--tool-version", action="append")
parser.add_argument("--experiment", action="append")
parser.add_argument("--cpu-family", action="append")
parser.add_argument("--cpu-model", action="append")
parser.add_argument("--cpu-vendor", action="append")
parser.add_argument("--cpu-arch", action="append")
parser.add_argument("--cpu-microarch", action="append")
parser.add_argument("--kernel", action="append")
parser.add_argument("--virt", action="append")

parser.add_argument("--event-details", action="store_true", default=False)
parser.add_argument("--tool-details", action="store_true", default=False)
parser.add_argument("--experiment-details", action="store_true", default=False)
parser.add_argument("--env-details", action="store",
                    help="1 = arch, microarch; 2=arch, microarch, family, model")
parser.add_argument("--kernel-details", action="store_true", default=False)
parser.add_argument("--virt-details", action="store_true", default=False)

parser.add_argument("--csv", action="store_true", default=False)
parser.add_argument("--table", action="store_true", default=False)
parser.add_argument("--debug", action="store_true", default=False)
parser.add_argument("--dryrun", action="store_true", default=False)

options = parser.parse_args()

logger = logging.getLogger(__name__)

def show_result(csv, table, debug, **kwargs):
    if debug or options.dryrun:
        set_logger_level(logging.DEBUG)
    qr = Query("results")
    basic_details = {"events.evt_num": options.event_details, "events.nmask": options.event_details,
                     "tools.name": options.tool_details,
                     "tools.version": options.tool_details, "experiments.name": options.experiment_details,
                     "kernels.name": options.kernel_details, "virt.name": options.virt_details}
    details = ["results.val", "events.name", "events.idgroup"]
    for index in basic_details:
        if basic_details[index]:
            details.append(index)
    if options.env_details == "1":
        details += ["environments.arch", "environments.microarch"]
    elif options.env_details == "2":
        details += ["environments.arch", "environments.microarch", "environments.family", "environments.model"]

    qr.set_select(details)

    for key, list_of_values in kwargs.items():
        if not list_of_values:
            continue
        for value in list_of_values:
            if value:
                qr.filter(**{key: value})
    data = qr.execute(dryrun=options.dryrun)
    logger.debug(data)
    if not options.dryrun:
        for line in format_output(data, csv, details, table):
            print line


if __name__ == '__main__':
    show_result(options.csv, options.table, options.debug, events__name=options.event,
                events__idgroup=options.event_group,
                tools__name=options.tool_name,
                tools__version=options.tool_version, experiments__name=options.experiment,
                environments__family=options.cpu_family, environments__model=options.cpu_model,
                vendors__name=options.cpu_vendor,
                environments__arch=options.cpu_arch, environments__microarch=options.cpu_microarch,
                kernels__name=options.kernel, virt__name=options.virt)

